// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/proto/gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1Client interface {
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	ResultSave(ctx context.Context, in *ResultSaveRequest, opts ...grpc.CallOption) (*ResultSaveResponse, error)
	ResultGet(ctx context.Context, in *ResultGetRequest, opts ...grpc.CallOption) (*ResultGetResponse, error)
	ResultsGet(ctx context.Context, in *ResultsGetRequest, opts ...grpc.CallOption) (V1_ResultsGetClient, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/gateway.v1/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, "/gateway.v1/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, "/gateway.v1/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ResultSave(ctx context.Context, in *ResultSaveRequest, opts ...grpc.CallOption) (*ResultSaveResponse, error) {
	out := new(ResultSaveResponse)
	err := c.cc.Invoke(ctx, "/gateway.v1/ResultSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ResultGet(ctx context.Context, in *ResultGetRequest, opts ...grpc.CallOption) (*ResultGetResponse, error) {
	out := new(ResultGetResponse)
	err := c.cc.Invoke(ctx, "/gateway.v1/ResultGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ResultsGet(ctx context.Context, in *ResultsGetRequest, opts ...grpc.CallOption) (V1_ResultsGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &V1_ServiceDesc.Streams[0], "/gateway.v1/ResultsGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1ResultsGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_ResultsGetClient interface {
	Recv() (*ResultsGetResponse, error)
	grpc.ClientStream
}

type v1ResultsGetClient struct {
	grpc.ClientStream
}

func (x *v1ResultsGetClient) Recv() (*ResultsGetResponse, error) {
	m := new(ResultsGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// V1Server is the server API for V1 service.
// All implementations must embed UnimplementedV1Server
// for forward compatibility
type V1Server interface {
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	ResultSave(context.Context, *ResultSaveRequest) (*ResultSaveResponse, error)
	ResultGet(context.Context, *ResultGetRequest) (*ResultGetResponse, error)
	ResultsGet(*ResultsGetRequest, V1_ResultsGetServer) error
	mustEmbedUnimplementedV1Server()
}

// UnimplementedV1Server must be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (UnimplementedV1Server) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedV1Server) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedV1Server) UserUpdate(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedV1Server) ResultSave(context.Context, *ResultSaveRequest) (*ResultSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultSave not implemented")
}
func (UnimplementedV1Server) ResultGet(context.Context, *ResultGetRequest) (*ResultGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultGet not implemented")
}
func (UnimplementedV1Server) ResultsGet(*ResultsGetRequest, V1_ResultsGetServer) error {
	return status.Errorf(codes.Unimplemented, "method ResultsGet not implemented")
}
func (UnimplementedV1Server) mustEmbedUnimplementedV1Server() {}

// UnsafeV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1Server will
// result in compilation errors.
type UnsafeV1Server interface {
	mustEmbedUnimplementedV1Server()
}

func RegisterV1Server(s grpc.ServiceRegistrar, srv V1Server) {
	s.RegisterService(&V1_ServiceDesc, srv)
}

func _V1_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.v1/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.v1/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.v1/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ResultSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ResultSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.v1/ResultSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ResultSave(ctx, req.(*ResultSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ResultGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ResultGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.v1/ResultGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ResultGet(ctx, req.(*ResultGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ResultsGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResultsGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).ResultsGet(m, &v1ResultsGetServer{stream})
}

type V1_ResultsGetServer interface {
	Send(*ResultsGetResponse) error
	grpc.ServerStream
}

type v1ResultsGetServer struct {
	grpc.ServerStream
}

func (x *v1ResultsGetServer) Send(m *ResultsGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// V1_ServiceDesc is the grpc.ServiceDesc for V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.v1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _V1_UserLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _V1_UserRegister_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _V1_UserUpdate_Handler,
		},
		{
			MethodName: "ResultSave",
			Handler:    _V1_ResultSave_Handler,
		},
		{
			MethodName: "ResultGet",
			Handler:    _V1_ResultGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ResultsGet",
			Handler:       _V1_ResultsGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/gateway.proto",
}
